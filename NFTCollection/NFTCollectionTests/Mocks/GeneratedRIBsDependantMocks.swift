///
/// @Generated by Mockolo
///



import Foundation
import RIBs
import RxSwift
import UIKit


public class DependencyMock: Dependency {
    public init() { }


}

public class EmptyDependencyMock: EmptyDependency {
    public init() { }


}

public class BuildableMock: Buildable {
    public init() { }


}

public class InteractorScopeMock: InteractorScope {
    public init() { }
    public init(isActive: Bool = false, isActiveStream: Observable<Bool> = BehaviorSubject<Bool>(value: false)) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }


    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSubjectSetCallCount = 0
    var _isActiveStream: Observable<Bool>? { didSet { isActiveStreamSubjectSetCallCount += 1 } }
    public var isActiveStreamSubject = BehaviorSubject<Bool>(value: false) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
    public var isActiveStream: Observable<Bool> {
        get { return _isActiveStream ?? isActiveStreamSubject }
        set { if let val = newValue as? BehaviorSubject<Bool> { isActiveStreamSubject = val } else { _isActiveStream = newValue } }
    }
}

public class InteractableMock: Interactable {
    public init() { }
    public init(isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject<Bool>()) {
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }


    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSubjectSetCallCount = 0
    var _isActiveStream: Observable<Bool>? { didSet { isActiveStreamSubjectSetCallCount += 1 } }
    public var isActiveStreamSubject = BehaviorSubject<Bool>(value: false) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
    public var isActiveStream: Observable<Bool> {
        get { return _isActiveStream ?? isActiveStreamSubject }
        set { if let val = newValue as? BehaviorSubject<Bool> { isActiveStreamSubject = val } else { _isActiveStream = newValue } }
    }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

public class LaunchRoutingMock: LaunchRouting {
    public init() { }
    public init(lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing](), viewControllable: ViewControllable = ViewControllableMock()) {
        self.lifecycle = lifecycle
        self.interactable = interactable
        self.children = children
        self.viewControllable = viewControllable
    }


    public private(set) var launchCallCount = 0
    public var launchHandler: ((UIWindow) -> ())?
    public func launch(from window: UIWindow)  {
        launchCallCount += 1
        if let launchHandler = launchHandler {
            launchHandler(window)
        }
        
    }

    public private(set) var lifecycleSubjectSetCallCount = 0
    var _lifecycle: Observable<RouterLifecycle>? { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycleSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycle: Observable<RouterLifecycle> {
        get { return _lifecycle ?? lifecycleSubject }
        set { if let val = newValue as? BehaviorSubject<RouterLifecycle> { lifecycleSubject = val } else { _lifecycle = newValue } }
    }

    public private(set) var interactableSetCallCount = 0
    public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }

    public private(set) var childrenSetCallCount = 0
    public var children: [Routing] = [Routing]() { didSet { childrenSetCallCount += 1 } }

    public private(set) var loadCallCount = 0
    public var loadHandler: (() -> ())?
    public func load()  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }

    public private(set) var attachChildCallCount = 0
    public var attachChildHandler: ((Routing) -> ())?
    public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }

    public private(set) var detachChildCallCount = 0
    public var detachChildHandler: ((Routing) -> ())?
    public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }

    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

public class PresentableMock: Presentable {
    public init() { }


}

public class RouterScopeMock: RouterScope {
    public init() { }
    public init(lifecycle: Observable<RouterLifecycle>) {
        self.lifecycle = lifecycle
    }


    public private(set) var lifecycleSubjectSetCallCount = 0
    var _lifecycle: Observable<RouterLifecycle>? { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycleSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycle: Observable<RouterLifecycle> {
        get { return _lifecycle ?? lifecycleSubject }
        set { if let val = newValue as? BehaviorSubject<RouterLifecycle> { lifecycleSubject = val } else { _lifecycle = newValue } }
    }
}

public class RoutingMock: Routing {
    public init() { }
    public init(lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing]()) {
        self.lifecycle = lifecycle
        self.interactable = interactable
        self.children = children
    }


    public private(set) var lifecycleSubjectSetCallCount = 0
    var _lifecycle: Observable<RouterLifecycle>? { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycleSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycle: Observable<RouterLifecycle> {
        get { return _lifecycle ?? lifecycleSubject }
        set { if let val = newValue as? BehaviorSubject<RouterLifecycle> { lifecycleSubject = val } else { _lifecycle = newValue } }
    }

    public private(set) var interactableSetCallCount = 0
    public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }

    public private(set) var childrenSetCallCount = 0
    public var children: [Routing] = [Routing]() { didSet { childrenSetCallCount += 1 } }

    public private(set) var loadCallCount = 0
    public var loadHandler: (() -> ())?
    public func load()  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }

    public private(set) var attachChildCallCount = 0
    public var attachChildHandler: ((Routing) -> ())?
    public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }

    public private(set) var detachChildCallCount = 0
    public var detachChildHandler: ((Routing) -> ())?
    public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
}

public class ViewableRoutingMock: ViewableRouting {
    public init() { }
    public init(lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing](), viewControllable: ViewControllable = ViewControllableMock()) {
        self.lifecycle = lifecycle
        self.interactable = interactable
        self.children = children
        self.viewControllable = viewControllable
    }


    public private(set) var lifecycleSubjectSetCallCount = 0
    var _lifecycle: Observable<RouterLifecycle>? { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycleSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycle: Observable<RouterLifecycle> {
        get { return _lifecycle ?? lifecycleSubject }
        set { if let val = newValue as? BehaviorSubject<RouterLifecycle> { lifecycleSubject = val } else { _lifecycle = newValue } }
    }

    public private(set) var interactableSetCallCount = 0
    public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }

    public private(set) var childrenSetCallCount = 0
    public var children: [Routing] = [Routing]() { didSet { childrenSetCallCount += 1 } }

    public private(set) var loadCallCount = 0
    public var loadHandler: (() -> ())?
    public func load()  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }

    public private(set) var attachChildCallCount = 0
    public var attachChildHandler: ((Routing) -> ())?
    public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }

    public private(set) var detachChildCallCount = 0
    public var detachChildHandler: ((Routing) -> ())?
    public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }

    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

public class ViewControllableMock: ViewControllable {
    public init() { }
    public init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

public class WorkingMock: Working {
    public init() { }
    public init(isStarted: Bool = false, isStartedStream: Observable<Bool> = BehaviorSubject<Bool>(value: false)) {
        self.isStarted = isStarted
        self.isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((InteractorScope) -> ())?
    public func start(_ interactorScope: InteractorScope)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(interactorScope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSubjectSetCallCount = 0
    var _isStartedStream: Observable<Bool>? { didSet { isStartedStreamSubjectSetCallCount += 1 } }
    public var isStartedStreamSubject = BehaviorSubject<Bool>(value: false) { didSet { isStartedStreamSubjectSetCallCount += 1 } }
    public var isStartedStream: Observable<Bool> {
        get { return _isStartedStream ?? isStartedStreamSubject }
        set { if let val = newValue as? BehaviorSubject<Bool> { isStartedStreamSubject = val } else { _isStartedStream = newValue } }
    }
}

