///
/// @Generated by Mockolo
///



import Foundation
import RIBs
import RxCocoa
import RxSwift
import SDWebImage
import SnapKit
import UIKit
@testable import NFTCollection


final class AssetCollectionInteractableMock: AssetCollectionInteractable {
    init() { }
    init(router: AssetCollectionRouting? = nil, listener: AssetCollectionListener? = nil, isActive: Bool = false, isActiveStream: Observable<Bool> = PublishSubject<Bool>()) {
        self.router = router
        self.listener = listener
        self.isActive = isActive
        self.isActiveStream = isActiveStream
    }


    private(set) var routerSetCallCount = 0
    var router: AssetCollectionRouting? = nil { didSet { routerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: AssetCollectionListener? = nil { didSet { listenerSetCallCount += 1 } }
    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }
    public private(set) var isActiveStreamSubjectSetCallCount = 0
    var _isActiveStream: Observable<Bool>? { didSet { isActiveStreamSubjectSetCallCount += 1 } }
    public var isActiveStreamSubject = BehaviorSubject<Bool>(value: false) { didSet { isActiveStreamSubjectSetCallCount += 1 } }
    public var isActiveStream: Observable<Bool> {
        get { return _isActiveStream ?? isActiveStreamSubject }
        set { if let val = newValue as? BehaviorSubject<Bool> { isActiveStreamSubject = val } else { _isActiveStream = newValue } }
    }
    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }
    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

final class AssetCollectionDependencyMock: AssetCollectionDependency {
    init() { }


}

final class AssetCollectionRoutingMock: AssetCollectionRouting {
    init() { }
    init(lifecycle: Observable<RouterLifecycle> = PublishSubject<RouterLifecycle>(), interactable: Interactable = InteractableMock(), children: [Routing] = [Routing](), viewControllable: ViewControllable = ViewControllableMock()) {
        self.lifecycle = lifecycle
        self.interactable = interactable
        self.children = children
        self.viewControllable = viewControllable
    }

    public private(set) var lifecycleSubjectSetCallCount = 0
    var _lifecycle: Observable<RouterLifecycle>? { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycleSubject: BehaviorSubject<RouterLifecycle>! { didSet { lifecycleSubjectSetCallCount += 1 } }
    public var lifecycle: Observable<RouterLifecycle> {
        get { return _lifecycle ?? lifecycleSubject }
        set { if let val = newValue as? BehaviorSubject<RouterLifecycle> { lifecycleSubject = val } else { _lifecycle = newValue } }
    }
    public private(set) var interactableSetCallCount = 0
    public var interactable: Interactable = InteractableMock() { didSet { interactableSetCallCount += 1 } }
    public private(set) var childrenSetCallCount = 0
    public var children: [Routing] = [Routing]() { didSet { childrenSetCallCount += 1 } }
    public private(set) var loadCallCount = 0
    public var loadHandler: (() -> ())?
    public func load()  {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler()
        }
        
    }
    public private(set) var attachChildCallCount = 0
    public var attachChildHandler: ((Routing) -> ())?
    public func attachChild(_ child: Routing)  {
        attachChildCallCount += 1
        if let attachChildHandler = attachChildHandler {
            attachChildHandler(child)
        }
        
    }
    public private(set) var detachChildCallCount = 0
    public var detachChildHandler: ((Routing) -> ())?
    public func detachChild(_ child: Routing)  {
        detachChildCallCount += 1
        if let detachChildHandler = detachChildHandler {
            detachChildHandler(child)
        }
        
    }
    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

final class AssetCollectionPresentableListenerMock: AssetCollectionPresentableListener {
    init() { }


    private(set) var fetchAssetsCallCount = 0
    var fetchAssetsHandler: ((Bool) -> ())?
    func fetchAssets(loadMore: Bool)  {
        fetchAssetsCallCount += 1
        if let fetchAssetsHandler = fetchAssetsHandler {
            fetchAssetsHandler(loadMore)
        }
        
    }

    private(set) var fetchEthBalanceCallCount = 0
    var fetchEthBalanceHandler: (() -> ())?
    func fetchEthBalance()  {
        fetchEthBalanceCallCount += 1
        if let fetchEthBalanceHandler = fetchEthBalanceHandler {
            fetchEthBalanceHandler()
        }
        
    }

    private(set) var didSelectItemCallCount = 0
    var didSelectItemHandler: ((IndexPath) -> ())?
    func didSelectItem(at indexPath: IndexPath)  {
        didSelectItemCallCount += 1
        if let didSelectItemHandler = didSelectItemHandler {
            didSelectItemHandler(indexPath)
        }
        
    }
}

final class AssetCollectionViewControllableMock: AssetCollectionViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

final class AssetCollectionPresentableMock: AssetCollectionPresentable {
    init() { }
    init(listener: AssetCollectionPresentableListener? = nil, assets: BehaviorSubject<[Asset]>, ethBalance: BehaviorSubject<Float80>) {
        self.listener = listener
        self._assets = assets
        self._ethBalance = ethBalance
    }


    private(set) var listenerSetCallCount = 0
    var listener: AssetCollectionPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var assetsSetCallCount = 0
    private var _assets: BehaviorSubject<[Asset]>!  { didSet { assetsSetCallCount += 1 } }
    var assets: BehaviorSubject<[Asset]> {
        get { return _assets }
        set { _assets = newValue }
    }

    private(set) var ethBalanceSetCallCount = 0
    private var _ethBalance: BehaviorSubject<Float80>!  { didSet { ethBalanceSetCallCount += 1 } }
    var ethBalance: BehaviorSubject<Float80> {
        get { return _ethBalance }
        set { _ethBalance = newValue }
    }
}

final class AssetCollectionListenerMock: AssetCollectionListener {
    init() { }


    private(set) var didSelectAssetCallCount = 0
    var didSelectAssetHandler: ((Asset) -> ())?
    func didSelectAsset(_ asset: Asset)  {
        didSelectAssetCallCount += 1
        if let didSelectAssetHandler = didSelectAssetHandler {
            didSelectAssetHandler(asset)
        }
        
    }
}

